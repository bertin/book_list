import React, { Component } from 'react';
import { connect } from 'react-redux';             // This is the function that binds the React Component with the Redux state, and makes/returns a Container.
import { selectBook } from '../actions/index';     // This is the selectBook action creator.
import { bindActionCreators } from 'redux';        // This is the function that makes the actions generated by the action creators end up flowing thru all the reducers.

class BookList extends Component {
   renderList() {
      return this.props.books.map( (book) => {
         return (
            <li
               key={book.title}
               onClick={ () => this.props.selectBook(book) }
               className="list-group-item">
               {book.title}
            </li>
         );
      });
   }

   render() {
      return (
         <ul className="list-group col-sm-4">
            {this.renderList()}
         </ul>
      );
   }
}

// The state parameter is the application state from Redux.
// Whatever is returned from this function is available thru the 'this.props' variable inside the component, like 'this.props.books' in our case.
// Whenever the state changes this function is run, and the container will automatically re-render.
function mapStateToProps(state) {
   // Whatever is reurned will show up as props inside BookList.
   return {
      books: state.books
   };
}

// Anything returned from this function will end up as props on the BookList container.
// In our case look at the first parameter to the bindActionCreators function, the  '{ selectBook: selectBook}'.
//    the first part, the 'selectBook' is available thru this.props.selectBook in the BookList container. this could be named whatever.
//    the second part, the 'selectBook' is the name of hte action creator. This must match the name of the action creator function.
function mapDispatchToProps(dispatch) {
   // Whenever selectBook is called, the result will be passed to all of our reducers in the whole application.
   return bindActionCreators( { selectBook: selectBook}, dispatch );
}

// Make use of the connect function from react-redux to promote BookList from a component to a container.
// Take this mapStateToProps, mapDispatchToProps, and the component, and return a container.
// And that container is what we want to export.
export default connect(mapStateToProps, mapDispatchToProps)(BookList);

// Promote the component to a container.
// A container is a React component that has a direct connection/access to the state managed by Redux.
// React-reduc is a Bridge between the two separate libraries (React and Redux), that melts the two libraries together.
// Container = Smart Component.
// When we promote a component into a container, we often put it in a directory named containers.
// Which component do we want to turn into a container: It varies
//   The most parent component that cares about a particular piece of state is to be promoted as a container.

// It is also important to be aware of that the React Component / Containers can have its own component state, like we saw in the video_browser application.
// The component state is internal to the component, and is completely different from the Redux application state.
// The componetn state, or part of it, can be sendt to child components as props.
